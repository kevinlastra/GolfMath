#include "GameMaster.h"
#include "Vector.h"
#include <string>
#include <iostream>
GameMaster::GameMaster(){}
void GameMaster::GenerateTerrain(std::string &s)
{
  Terrain t(s);
  T = t;
}
void GameMaster::AddPlayer()
{
  PlayerController p(T.getStartPos());
  Players[nbplayers] = p;
  nbplayers++;
}
void GameMaster::PrintMap()
{
  for(int i = 0; i < T.getLon();i++)
  {
    for(int j = 0; j < T.getLar();j++)
    {
      
      Vector v(i,j);
      if(playerAtPos(v))
      {
	std::cout << "\033[1;42m\033[1;35m[P]\033[0m";
      }
      else
      {
	switch(T.getNode(v).getType())
	{
        case Node::herbe:
	  std::cout << "\033[1;42m\033[1;32m["<<T.getNode(v).getPorter()<<"]\033[0m";
	  break;
        case Node::start:
	  std::cout << "\033[1;43m\033[1;33m["<<T.getNode(v).getPorter()<<"]\033[0m";
	  break;
	case Node::end:
	  std::cout << "\033[1;42m\033[1;34m[T]\033[0m";
	  break;
	case Node::sable:
	  std::cout << "\033[1;43m\033[1;33m["<<T.getNode(v).getPorter()<<"]\033[0m";
	  break;
	default:
	  std::cout << "\033[1;44m\033[1;34m  ~\033[0m";
	  break;
	}
      }
    }
    std::cout << std::endl;
  }
}
void GameMaster::Start()
{
  std::string mapPath = "testmap.txt";
  GenerateTerrain(mapPath);
  AddPlayer();
  PrintMap();
}
bool GameMaster::playerAtPos(Vector &v)
{
  for(int i = 0;i < nbplayers;i++)
  {
    if(Players[i].GetPos().x == v.y && Players[i].GetPos().y == v.x)
    {
      return true;
    } 
  }
  return false;
}
int GameMaster::getNbPlayers(){return nbplayers;}
